{"version":3,"sources":["../src/zodUtils.ts","../src/Dotenv.ts"],"names":["fs"],"mappings":"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","file":"index.js","sourcesContent":["import { ZodError } from \"zod\";\n\nexport const toPrettyZodErrors = (error: ZodError): string[] => {\n  return error.issues.map((issue) => `${issue.path.join(\".\")}: ${issue.message}`);\n};\n\nexport const toPrettyZodError = (error: ZodError): string => {\n  return `Zod validation error: ${error.message}\\n${toPrettyZodErrors(error).join(\"\\n\")}`;\n};\n","import fs from \"fs/promises\";\nimport { z } from \"zod\";\nimport { toPrettyZodError } from \"./zodUtils\";\n\nexport type DotenvLogger = {\n  info: (message: string, ctx?: Record<string, unknown>) => void;\n  error: (message: string, ctx?: Record<string, unknown>) => void;\n};\n\nexport type ConfigOptions = {\n  filepaths?: string[];\n  schema?: z.ZodSchema;\n  logger?: DotenvLogger;\n  coerceValues?: boolean;\n};\n\nexport type LoadOptions<T> = {\n  filepaths?: string[];\n  schema: z.ZodSchema<T>;\n  logger?: DotenvLogger;\n  coerceValues?: boolean;\n};\n\nconst defaultLogger: DotenvLogger = {\n  info: (message: string, ctx?: Record<string, unknown>) => {\n    console.log(message, ctx);\n  },\n  error: (message: string, ctx?: Record<string, unknown>) => {\n    console.error(message, ctx);\n  },\n};\n\n/**\n * A TypeScript-first environment variable loader with Zod schema validation.\n *\n * This class provides methods to load environment variables from .env files,\n * validate them against Zod schemas, and support multi-line strings.\n *\n * @example\n * ```typescript\n * const config = await Dotenv.load({\n *   filepaths: ['.env', '.env.local'],\n *   schema: z.object({\n *     DATABASE_URL: z.string().url(),\n *     PORT: z.string().transform(Number),\n *   }),\n * });\n * ```\n */\nexport class Dotenv {\n  private readonly logger: DotenvLogger;\n  private readonly coerceValues: boolean;\n  private parsedValues: Record<string, unknown> = {};\n\n  /**\n   * Creates a new Dotenv instance.\n   * @param options - Configuration options for the Dotenv instance\n   */\n  private constructor(options: ConfigOptions) {\n    this.logger = options.logger ?? defaultLogger;\n    this.coerceValues = options.coerceValues ?? false;\n  }\n\n  /**\n   * Loads environment variables from a single .env file.\n   * @param filepath - Path to the .env file to load\n   */\n  async load(filepath: string) {\n    this.logger.info(`Loading environment variables from ${filepath}`);\n    try {\n      const envFile = await fs.readFile(filepath, \"utf8\");\n\n      // Parse the environment file content\n      const envVars = this.parseEnvFile(envFile);\n\n      // Set environment variables (as strings for process.env)\n      for (const [key, value] of Object.entries(envVars)) {\n        process.env[key] = String(value);\n        this.parsedValues[key] = value;\n      }\n    } catch (error) {\n      this.logger.error(\n        `Failed to load environment variables from ${filepath}: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n      throw error;\n    }\n  }\n\n  private parseEnvFile(content: string): Record<string, unknown> {\n    const envVars: Record<string, unknown> = {};\n    const lines = content.split(\"\\n\");\n\n    let currentKey: string | null = null;\n    let currentValue: string[] = [];\n    let inMultiline = false;\n    let wasMultiline = false;\n\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n      const trimmedLine = line.trim();\n\n      // Skip comments\n      if (trimmedLine.startsWith(\"#\")) {\n        continue;\n      }\n\n      // Skip empty lines, but not when we're in a multi-line string\n      if (!trimmedLine && !inMultiline) {\n        continue;\n      }\n\n      // Check if this line starts a new key-value pair\n      const equalsIndex = line.indexOf(\"=\");\n      if (equalsIndex !== -1 && !inMultiline) {\n        // Save previous key-value pair if exists\n        if (currentKey && currentValue.length > 0) {\n          const rawValue = wasMultiline\n            ? this.unescapeString(currentValue.join(\"\\n\"))\n            : this.processValue(currentValue.join(\"\\n\"));\n\n          envVars[currentKey] = this.coerceValues ? this.coerceValue(rawValue) : rawValue;\n        }\n\n        // Start new key-value pair\n        currentKey = line.substring(0, equalsIndex).trim();\n        const valueStart = line.substring(equalsIndex + 1);\n\n        // Check if value starts with triple double quotes for multi-line strings\n        if (valueStart.startsWith('\"\"\"')) {\n          // This is a multi-line string - remove the opening quotes\n          inMultiline = true;\n          wasMultiline = true;\n          const afterQuotes = valueStart.substring(3);\n          currentValue = afterQuotes ? [afterQuotes] : [];\n        } else if (valueStart.startsWith('\"')) {\n          // Check if this is a single-line quoted string\n          if (this.hasClosingQuote(valueStart)) {\n            currentValue = [valueStart];\n            inMultiline = false;\n            wasMultiline = false;\n          } else {\n            // Single quote without closing quote - treat as regular value\n            currentValue = [valueStart];\n            inMultiline = false;\n            wasMultiline = false;\n          }\n        } else {\n          currentValue = [valueStart];\n          inMultiline = false;\n          wasMultiline = false;\n        }\n      } else if (inMultiline && currentKey) {\n        // Continue multi-line value\n        currentValue.push(line);\n\n        // Check if this line ends the multi-line string (triple quotes)\n        const lastLine = currentValue[currentValue.length - 1];\n        if (this.hasClosingTripleQuotes(lastLine)) {\n          // Remove the closing triple quotes from the last line\n          const trimmedLastLine = lastLine.substring(0, lastLine.length - 3);\n          currentValue[currentValue.length - 1] = trimmedLastLine;\n          inMultiline = false;\n        }\n      } else if (currentKey) {\n        // Continue single-line value (indented continuation)\n        currentValue.push(line);\n      }\n    }\n\n    // Save the last key-value pair\n    if (currentKey && currentValue.length > 0) {\n      const rawValue = wasMultiline\n        ? this.unescapeString(currentValue.join(\"\\n\"))\n        : this.processValue(currentValue.join(\"\\n\"));\n\n      envVars[currentKey] = this.coerceValues ? this.coerceValue(rawValue) : rawValue;\n    }\n\n    return envVars;\n  }\n\n  private processValue(value: string): string {\n    // If value is triple-quoted, remove triple quotes and unescape\n    if (value.startsWith('\"\"\"') && value.endsWith('\"\"\"')) {\n      const unquoted = value.slice(3, -3);\n      return this.unescapeString(unquoted);\n    }\n    // If value is single-quoted, remove quotes and unescape\n    if (value.startsWith('\"') && value.endsWith('\"')) {\n      const unquoted = value.slice(1, -1);\n      return this.unescapeString(unquoted);\n    }\n    return value.trim();\n  }\n\n  private coerceValue(value: string): unknown {\n    const trimmed = value.trim();\n\n    // Try to parse as JSON first\n    if (trimmed.startsWith(\"{\") || trimmed.startsWith(\"[\")) {\n      try {\n        return JSON.parse(trimmed);\n      } catch {\n        // If JSON parsing fails, continue with other coercions\n      }\n    }\n\n    // Check for boolean values\n    if (trimmed.toLowerCase() === \"true\") {\n      return true;\n    }\n    if (trimmed.toLowerCase() === \"false\") {\n      return false;\n    }\n\n    // Check for null\n    if (trimmed.toLowerCase() === \"null\") {\n      return null;\n    }\n\n    // Check for numbers\n    if (!isNaN(Number(trimmed)) && trimmed !== \"\") {\n      const num = Number(trimmed);\n      // Check if it's actually a number (not NaN) and not an empty string converted to 0\n      if (!isNaN(num) && (trimmed !== \"\" || num !== 0)) {\n        return num;\n      }\n    }\n\n    // Return as string if no other type matches\n    return value;\n  }\n\n  private hasClosingQuote(line: string): boolean {\n    // Check if line has an unescaped quote at the end (closing quote)\n    for (let i = line.length - 1; i >= 0; i--) {\n      if (line[i] === '\"') {\n        // Check if this quote is not escaped\n        if (i === 0 || line[i - 1] !== \"\\\\\") {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  private hasClosingTripleQuotes(line: string): boolean {\n    // Check if line ends with triple quotes\n    return line.trim().endsWith('\"\"\"');\n  }\n\n  private unescapeString(value: string): string {\n    // Replace escaped quotes with regular quotes\n    return value.replace(/\\\\\"/g, '\"');\n  }\n\n  /**\n   * Initializes the Dotenv instance by loading files and optionally validating with a schema.\n   * @param options - Configuration options for initialization\n   */\n  async initialize(options: ConfigOptions) {\n    if (options.filepaths) {\n      for (const filepath of options.filepaths) {\n        await this.load(filepath ?? \".env\");\n      }\n    }\n\n    const profiles = process.env.PROFILES?.split(\",\")\n      .map((profile) => profile.trim())\n      .filter((profile) => profile.length > 0);\n    if (profiles && profiles.length > 0) {\n      this.logger.info(`Loading profiles: PROFILES=${profiles.join(\",\")}`);\n      for (const profile of profiles) {\n        await this.load(`.env.${profile}`);\n      }\n    }\n\n    if (options.schema) {\n      this.logger.info(\"Validating environment variables\");\n      this.get(options.schema);\n    }\n  }\n\n  /**\n   * Validates and returns environment variables using a Zod schema.\n   * @param schema - Zod schema to validate environment variables against\n   * @returns Validated configuration object\n   * @throws Error if validation fails\n   */\n  get<T>(schema: z.ZodSchema<T>): T {\n    // Use parsed values if coercion is enabled, otherwise use process.env for backward compatibility\n    const envData = this.coerceValues ? this.parsedValues : process.env;\n    const result = schema.safeParse(envData);\n    if (!result.success) {\n      this.logger.error(toPrettyZodError(result.error), {\n        cause: result.error,\n        env: envData,\n      });\n      throw new Error(toPrettyZodError(result.error));\n    }\n    return result.data;\n  }\n\n  /**\n   * Creates and configures a Dotenv instance.\n   * @param options - Configuration options\n   * @returns Configured Dotenv instance\n   */\n  static async configure(options: ConfigOptions) {\n    const dotenv = new Dotenv(options);\n    await dotenv.initialize(options);\n    return dotenv;\n  }\n\n  /**\n   * Loads and validates environment variables in one step.\n   * @param options - Load options including schema for validation\n   * @returns Validated configuration object\n   */\n  static async load<T>(options: LoadOptions<T>) {\n    const dotenv = new Dotenv(options);\n    await dotenv.initialize(options);\n    return dotenv.get(options.schema);\n  }\n}\n"]}