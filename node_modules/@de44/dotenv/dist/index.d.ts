import { z } from 'zod';

type DotenvLogger = {
    info: (message: string, ctx?: Record<string, unknown>) => void;
    error: (message: string, ctx?: Record<string, unknown>) => void;
};
type ConfigOptions = {
    filepaths?: string[];
    schema?: z.ZodSchema;
    logger?: DotenvLogger;
    coerceValues?: boolean;
};
type LoadOptions<T> = {
    filepaths?: string[];
    schema: z.ZodSchema<T>;
    logger?: DotenvLogger;
    coerceValues?: boolean;
};
/**
 * A TypeScript-first environment variable loader with Zod schema validation.
 *
 * This class provides methods to load environment variables from .env files,
 * validate them against Zod schemas, and support multi-line strings.
 *
 * @example
 * ```typescript
 * const config = await Dotenv.load({
 *   filepaths: ['.env', '.env.local'],
 *   schema: z.object({
 *     DATABASE_URL: z.string().url(),
 *     PORT: z.string().transform(Number),
 *   }),
 * });
 * ```
 */
declare class Dotenv {
    private readonly logger;
    private readonly coerceValues;
    private parsedValues;
    /**
     * Creates a new Dotenv instance.
     * @param options - Configuration options for the Dotenv instance
     */
    private constructor();
    /**
     * Loads environment variables from a single .env file.
     * @param filepath - Path to the .env file to load
     */
    load(filepath: string): Promise<void>;
    private parseEnvFile;
    private processValue;
    private coerceValue;
    private hasClosingQuote;
    private hasClosingTripleQuotes;
    private unescapeString;
    /**
     * Initializes the Dotenv instance by loading files and optionally validating with a schema.
     * @param options - Configuration options for initialization
     */
    initialize(options: ConfigOptions): Promise<void>;
    /**
     * Validates and returns environment variables using a Zod schema.
     * @param schema - Zod schema to validate environment variables against
     * @returns Validated configuration object
     * @throws Error if validation fails
     */
    get<T>(schema: z.ZodSchema<T>): T;
    /**
     * Creates and configures a Dotenv instance.
     * @param options - Configuration options
     * @returns Configured Dotenv instance
     */
    static configure(options: ConfigOptions): Promise<Dotenv>;
    /**
     * Loads and validates environment variables in one step.
     * @param options - Load options including schema for validation
     * @returns Validated configuration object
     */
    static load<T>(options: LoadOptions<T>): Promise<T>;
}

export { type ConfigOptions, Dotenv, type DotenvLogger, type LoadOptions };
